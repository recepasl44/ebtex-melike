<?php

use App\Helpers\uuid;
use App\Models\Access\Permission\Permission;
use App\Models\Notification\Notification;
use App\Models\Settings\Setting;
use App\Supports\Carbon as Carbon;
use App\Models\Words\Word;
use Illuminate\Support\Str;

/**
 * Henerate UUID.
 *
 * @return uuid
 */
function generateUuid()
{
    return uuid::uuid4();
}

if (!function_exists('active_class')) {
    /**
     * Get the active class if the condition is not falsy.
     *
     * @param        $condition
     * @param string $activeClass
     * @param string $inactiveClass
     *
     * @return string
     */
    function active_class($condition, $activeClass = 'active', $inactiveClass = '')
    {
        return $condition ? $activeClass : $inactiveClass;
    }
}

if (!function_exists('homeRoute')) {

    /**
     * Return the route to the "home" page depending on authentication/authorization status.
     *
     * @return string
     */
    function homeRoute()
    {
        if (access()->allow('view-backend')) {
            return 'admin.dashboard';
        } elseif (auth()->check()) {
            return 'frontend.user.dashboard';
        }

        return 'frontend.index';
    }
}

/*
 * Global helpers file with misc functions.
 */
if (!function_exists('app_name')) {
    /**
     * Helper to grab the application name.
     *
     * @return mixed
     */
    function app_name()
    {
        return config('app.name');
    }
}

if (!function_exists('access')) {
    /**
     * Access (lol) the Access:: facade as a simple function.
     */
    function access()
    {
        return app('access');
    }
}

if (!function_exists('history')) {
    /**
     * Access the history facade anywhere.
     */
    function history()
    {
        return app('history');
    }
}

if (!function_exists('gravatar')) {
    /**
     * Access the gravatar helper.
     */
    function gravatar()
    {
        return app('gravatar');
    }
}

if (!function_exists('includeRouteFiles')) {

    /**
     * Loops through a folder and requires all PHP files
     * Searches sub-directories as well.
     *
     * @param $folder
     */
    function includeRouteFiles($folder)
    {
        $directory = $folder;
        $handle = opendir($directory);
        $directory_list = [$directory];

        while (false !== ($filename = readdir($handle))) {
            if ($filename != '.' && $filename != '..' && is_dir($directory.$filename)) {
                array_push($directory_list, $directory.$filename.'/');
            }
        }

        foreach ($directory_list as $directory) {
            foreach (glob($directory.'*.php') as $filename) {
                require $filename;
            }
        }
    }
}

if (!function_exists('getRtlCss')) {

    /**
     * The path being passed is generated by Laravel Mix manifest file
     * The webpack plugin takes the css filenames and appends rtl before the .css extension
     * So we take the original and place that in and send back the path.
     *
     * @param $path
     *
     * @return string
     */
    function getRtlCss($path)
    {
        $path = explode('/', $path);
        $filename = end($path);
        array_pop($path);
        $filename = rtrim($filename, '.css');

        return implode('/', $path).'/'.$filename.'.rtl.css';
    }
}

if (!function_exists('settings')) {
    /**
     * Access the settings helper.
     */
    function settings()
    {
        // Settings Details
        $settings = Setting::latest()->first();
        if (!empty($settings)) {
            return $settings;
        }
    }
}

if (!function_exists('createNotification')) {
    /**
     * create new notification.
     *
     * @param  $message    message you want to show in notification
     * @param  $userId     To Whom You Want To send Notification
     *
     * @return object
     */
    function createNotification($message, $userId)
    {
        $notification = new Notification();

        return $notification->insert([
            'message'    => $message,
            'user_id'    => $userId,
            'type'       => 1,
            'created_at' => Carbon::now(),
        ]);
    }
}

if (!function_exists('escapeSlashes')) {
    /**
     * Access the escapeSlashes helper.
     */
    function escapeSlashes($path)
    {
        $path = str_replace('\\', DIRECTORY_SEPARATOR, $path);
        $path = str_replace('//', DIRECTORY_SEPARATOR, $path);
        $path = trim($path, DIRECTORY_SEPARATOR);

        return $path;
    }
}
if (!function_exists('flattenArray')) {
    /**
     * flattenArray.
     */
    function flattenArray($array) {
        $result = [];
        if(empty($array)){
            return null;
        }

        foreach ($array as $item) {

            if (is_array($item)) {
                $result = array_merge($result, $item);
            } else {
                $result[] = $item;
            }
        }

        return $result;
    }
}

if (!function_exists('getMenuItems')) {
    /**
     * Converts items (json string) to array and return array.
     */
    function getMenuItems($type = 'backend', $id = null)
    {
        $menu = new \App\Models\Menu\Menu();
        $menu = $menu->where('type', $type);
        if (!empty($id)) {
            $menu = $menu->where('id', $id);
        }
        $menu = $menu->first();
        if (!empty($menu) && !empty($menu->items)) {
            return json_decode($menu->items);
        }

        return [];
    }
}

if (!function_exists('getRouteUrl')) {
    /**
     * Converts querystring params to array and use it as route params and returns URL.
     */
    function getRouteUrl($url, $url_type = 'route', $separator = '?')
    {
        $routeUrl = '';
        if (!empty($url)) {
            if ($url_type == 'route') {
                if (strpos($url, $separator) !== false) {
                    $urlArray = explode($separator, $url);
                    $url = $urlArray[0];
                    parse_str($urlArray[1], $params);
                    $routeUrl = route($url, $params);
                } else {
                    if(Route::has($url)) {
                        $routeUrl = route($url);
                    }else{
                        $routeUrl = '#';
                    }

                }
            } else {
                $routeUrl = $url;
            }
        }

        return $routeUrl;
    }
}

if (!function_exists('renderMenuItems')) {
    /**
     * render sidebar menu items after permission check.
     */
    function renderMenuItems($items, $viewName = 'backend.includes.partials.sidebar-item', $menuItemType = 'parent')
    {
        foreach ($items as $item) {
            // if(!empty($item->url) && !Route::has($item->url)) {
            //     return;
            // }
            if (!empty($item->view_permission_id)) {
                if (access()->allow($item->view_permission_id)) {
                    echo view($viewName, compact('item','menuItemType'));
                }
            } else {
                echo view($viewName, compact('item','menuItemType'));
            }
        }
    }
}

if (!function_exists('isActiveMenuItem')) {
    /**
     * checks if current URL is of current menu/sub-menu.
     */
    function isActiveMenuItem($item, $separator = '?')
    {
        $item->clean_url = $item->url;
        if (strpos($item->url, $separator) !== false) {
            $item->clean_url = explode($separator, $item->url, -1);
        }
        if (route_is($item->clean_url) || request()->is($item->clean_url) ) {
            return true;
        }
        if (!empty($item->children)) {
            foreach ($item->children as $child) {
                if(isActiveMenuItem($child, $separator)){
                    return true;
                }
            }
        }

        return false;
    }
}

if (!function_exists('checkDatabaseConnection')) {

    /**
     * @return bool
     */
    function checkDatabaseConnection()
    {
        try {
            DB::connection()->reconnect();

            return true;
        } catch (Exception $ex) {
            return false;
        }
    }
}
if (!function_exists('_trans')) {
    function _trans($name){
        if ($word = Word::where(['word' => $name,'lang'=>App::getLocale()])->orderBy('id','DESC')->first()) {
            return $word->meaning;
        }else {
            return $name;
        }
        
    }
}

if (!function_exists('trans_menu')) {
    function trans_menu($name){
        $slugify_name = Str::slug(Str::kebab($name), '_');
        if ($word = Word::where(['word' => $slugify_name,'lang'=>App::getLocale()])->orderBy('id','DESC')->first()) {
            return $word->meaning;
        }else if (\Lang::has('generals.menu.'.strtolower($slugify_name))) {
            return _tr('generals.menu.'.strtolower($slugify_name));
        } else {
            $name = str_replace('_', ' ', $name);
            return ucfirst($name);
        }
        
    }
}
if (!function_exists('findWord')) {
    function findWord($path){
        if(strstr($path, '.') == true){
            $strArray = explode('.',$path);
            if(!empty($strArray[count($strArray) - 2])){
                if($strArray[count($strArray) - 2] == 'table'){
                    return $strArray[count($strArray) - 1] ?? null;
                }elseif($strArray[count($strArray) - 1] == 'management'){
                    return _tr($strArray[count($strArray) - 2].'_'.$strArray[count($strArray) - 1]);
                }else{
                    return _tr($strArray[count($strArray) - 1]);
                }

            }
            return $path;
        }else{
            return Str::slug(Str::kebab($path), '_');
        }
    }
}
if (!function_exists('_tr')) {
    function _tr($path, $attrs = null ){
        $name = findWord($path);

        if ($word = Word::where(['word' => $name,'lang'=>App::getLocale()])->orderBy('id','DESC')->first()) {
            return $word->meaning;
        }elseif (\Lang::has($path)) {
//            $repo = new \App\Repositories\Backend\Words\WordRepository();
//            if(!empty($name)){
//                $repo->create(['word' => $name, 'lang' => App::getLocale(), 'meaning' => $name]);
//            }

            if(is_array($path)){
                return '';
            }else{
                return trans($path);
            }

        }else {
//            $repo = new \App\Repositories\Backend\Words\WordRepository();
//            if(!empty($name)){
//                $repo->create(['word' => $name, 'lang' => App::getLocale(), 'meaning' => $name]);
//            }
            return ucfirst($name);
        }

    }
}
if ( !function_exists('getTurkishText') ){
    function getTurkishText($jsonData)
    {
        // JSON verisini decode et
        $decodedData = json_decode($jsonData, true);

        return response()->json($decodedData, 200, [], JSON_UNESCAPED_UNICODE);
    }
}
if ( !function_exists('getJsonWithName2Text') ){
    function getJsonWithName2Text($jsonData)
    {
        // JSON verisini decode et
        $data = json_decode($jsonData, true);

        // Sonuçları depolamak için boş bir dizi oluştur
        $result = [];

        // İstediğiniz alanları filtreleyin
        foreach ($data as $item) {
                $result[] = $item['name'] . ': ' . $item['type'];
        }

        // Sonucu yazdır
        return implode(",\n<br>", $result);
    }
}
if ( !function_exists('getJson2Text') ){
    function getJson2Text($jsonData)
    {
        // JSON verisini decode et
        $data = json_decode($jsonData, true);

        // Sonuçları depolamak için boş bir dizi oluştur
        $result = [];

        // Verileri işleyin ve istediğiniz formata dönüştürün
        foreach ($data as $item) {
            foreach ($item as $key => $value) {
                if ($value === null) {
                    $result[] = '<strong>'.$key.'</strong>: '.null;
                } else {
                    $result[] = '<strong>'.$key.'</strong>: '.substr(strip_tags($value), 0, 150);
                }
            }
        }

        // Sonucu yazdır
        return implode(",\n<br>", $result);
    }
}

if (! function_exists('assets')) {
    /**
     * Generate an asset path for the application.
     *
     * @param  string  $path
     * @param  bool|null  $secure
     * @return string
     */
    function assets($path, $secure = null)
    {
        return app('url')->asset(env('public_path', '').$path, $secure);
    }
}

if (! function_exists('get_contents')) {
    function get_contents($path)
    {
        $ch = curl_init();

        // cURL ayarlarını yapılandırın
        curl_setopt($ch, CURLOPT_URL, $path);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); // Geliştirme ortamında kullanın

        // Veriyi çekin
        $content = curl_exec($ch);

        // Hata kontrolü yapın
        if ($content === false) {
            die('cURL Error: ' . curl_error($ch));
        }
        // cURL oturumunu kapatın
        curl_close($ch);
        // SVG içeriğini HTML'ye ekleyin
        echo $content;
    }
}
if (! function_exists('formatCurrency')) {
    function formatCurrency($amount) {
        // Öncelikle miktarı double türüne çeviriyoruz.
        $amount = (double)$amount;

        // Eğer ondalık kısım yoksa formatlama yaparken bunu göz önünde bulunduruyoruz.
        if (floor($amount) == $amount) {
            // Tamsayı için format
            return number_format($amount, 0, ',', '.') . ' ₺';
        } else {
            // Ondalık sayı için format
            return number_format($amount, 2, ',', '.') . ' ₺';
        }
    }
}

if (! function_exists('formatPercentage')) {
    function formatPercentage($amount) {
        // Öncelikle miktarı double türüne çeviriyoruz.
        $amount = (double)$amount;

        // Eğer ondalık kısım yoksa formatlama yaparken bunu göz önünde bulunduruyoruz.
        if (floor($amount) == $amount) {
            // Tamsayı için format
            return '% '.number_format($amount, 0, ',', '.');
        } else {
            // Ondalık sayı için format
            return '% '.number_format($amount, 2, ',', '.');
        }
    }
}

if (! function_exists('optional_value')) {
    /**
     * Provide access to optional objects.
     *
     * @param  mixed  $value
     * @param  callable|null  $callback
     * @return mixed
     */
    function optional_value($variable = null, $value = null)
    {
        if (!empty($variable) && !empty($value) && !empty($variable->{$value})) {
            return $variable->{$value};
        }
        return null;
    }
}


if (! function_exists('create_permission')) {
    function create_permission($name, $display_name = null) {
        $display_name = $display_name ?? $name;
        $x = Permission::firstOrNew(['name' => $name]);
        $x->display_name = $display_name;
        $x->save();
        return null;
    }
}
if (! function_exists('get_permission')) {
    function get_permission($name) {
        return Permission::where('name', $name)->firstOrFail();
    }
}

